// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: config.go

package alipay

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *PayConfig) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *PayConfig) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Partner":`)
	fflib.WriteJsonString(buf, string(j.Partner))
	buf.WriteString(`,"PrivateKey":`)
	fflib.WriteJsonString(buf, string(j.PrivateKey))
	buf.WriteString(`,"PublicKey":`)
	fflib.WriteJsonString(buf, string(j.PublicKey))
	buf.WriteString(`,"ReturnURL":`)
	fflib.WriteJsonString(buf, string(j.ReturnURL))
	buf.WriteString(`,"NotifyURL":`)
	fflib.WriteJsonString(buf, string(j.NotifyURL))
	buf.WriteString(`,"Code":`)
	fflib.WriteJsonString(buf, string(j.Code))
	buf.WriteString(`,"Name":`)
	fflib.WriteJsonString(buf, string(j.Name))
	if j.State {
		buf.WriteString(`,"State":true`)
	} else {
		buf.WriteString(`,"State":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPayConfigbase = iota
	ffjtPayConfignosuchkey

	ffjtPayConfigPartner

	ffjtPayConfigPrivateKey

	ffjtPayConfigPublicKey

	ffjtPayConfigReturnURL

	ffjtPayConfigNotifyURL

	ffjtPayConfigCode

	ffjtPayConfigName

	ffjtPayConfigState
)

var ffjKeyPayConfigPartner = []byte("Partner")

var ffjKeyPayConfigPrivateKey = []byte("PrivateKey")

var ffjKeyPayConfigPublicKey = []byte("PublicKey")

var ffjKeyPayConfigReturnURL = []byte("ReturnURL")

var ffjKeyPayConfigNotifyURL = []byte("NotifyURL")

var ffjKeyPayConfigCode = []byte("Code")

var ffjKeyPayConfigName = []byte("Name")

var ffjKeyPayConfigState = []byte("State")

// UnmarshalJSON umarshall json - template of ffjson
func (j *PayConfig) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *PayConfig) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPayConfigbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPayConfignosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffjKeyPayConfigCode, kn) {
						currentKey = ffjtPayConfigCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'N':

					if bytes.Equal(ffjKeyPayConfigNotifyURL, kn) {
						currentKey = ffjtPayConfigNotifyURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPayConfigName, kn) {
						currentKey = ffjtPayConfigName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffjKeyPayConfigPartner, kn) {
						currentKey = ffjtPayConfigPartner
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPayConfigPrivateKey, kn) {
						currentKey = ffjtPayConfigPrivateKey
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPayConfigPublicKey, kn) {
						currentKey = ffjtPayConfigPublicKey
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffjKeyPayConfigReturnURL, kn) {
						currentKey = ffjtPayConfigReturnURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyPayConfigState, kn) {
						currentKey = ffjtPayConfigState
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyPayConfigState, kn) {
					currentKey = ffjtPayConfigState
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPayConfigName, kn) {
					currentKey = ffjtPayConfigName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPayConfigCode, kn) {
					currentKey = ffjtPayConfigCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPayConfigNotifyURL, kn) {
					currentKey = ffjtPayConfigNotifyURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPayConfigReturnURL, kn) {
					currentKey = ffjtPayConfigReturnURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPayConfigPublicKey, kn) {
					currentKey = ffjtPayConfigPublicKey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPayConfigPrivateKey, kn) {
					currentKey = ffjtPayConfigPrivateKey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPayConfigPartner, kn) {
					currentKey = ffjtPayConfigPartner
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPayConfignosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPayConfigPartner:
					goto handle_Partner

				case ffjtPayConfigPrivateKey:
					goto handle_PrivateKey

				case ffjtPayConfigPublicKey:
					goto handle_PublicKey

				case ffjtPayConfigReturnURL:
					goto handle_ReturnURL

				case ffjtPayConfigNotifyURL:
					goto handle_NotifyURL

				case ffjtPayConfigCode:
					goto handle_Code

				case ffjtPayConfigName:
					goto handle_Name

				case ffjtPayConfigState:
					goto handle_State

				case ffjtPayConfignosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Partner:

	/* handler: j.Partner type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Partner = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PrivateKey:

	/* handler: j.PrivateKey type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PrivateKey = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PublicKey:

	/* handler: j.PublicKey type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PublicKey = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReturnURL:

	/* handler: j.ReturnURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ReturnURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NotifyURL:

	/* handler: j.NotifyURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.NotifyURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Code:

	/* handler: j.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: j.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_State:

	/* handler: j.State type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.State = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.State = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *withdrawAPIRequest) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *withdrawAPIRequest) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"out_biz_no":`)
	fflib.WriteJsonString(buf, string(j.OutBizNo))
	buf.WriteString(`,"payee_type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteString(`,"payee_account":`)
	fflib.WriteJsonString(buf, string(j.Account))
	buf.WriteString(`,"amount":`)
	fflib.WriteJsonString(buf, string(j.Amount))
	buf.WriteString(`,"payee_real_name":`)
	fflib.WriteJsonString(buf, string(j.RealName))
	buf.WriteString(`,"remark":`)
	fflib.WriteJsonString(buf, string(j.Remark))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtwithdrawAPIRequestbase = iota
	ffjtwithdrawAPIRequestnosuchkey

	ffjtwithdrawAPIRequestOutBizNo

	ffjtwithdrawAPIRequestType

	ffjtwithdrawAPIRequestAccount

	ffjtwithdrawAPIRequestAmount

	ffjtwithdrawAPIRequestRealName

	ffjtwithdrawAPIRequestRemark
)

var ffjKeywithdrawAPIRequestOutBizNo = []byte("out_biz_no")

var ffjKeywithdrawAPIRequestType = []byte("payee_type")

var ffjKeywithdrawAPIRequestAccount = []byte("payee_account")

var ffjKeywithdrawAPIRequestAmount = []byte("amount")

var ffjKeywithdrawAPIRequestRealName = []byte("payee_real_name")

var ffjKeywithdrawAPIRequestRemark = []byte("remark")

// UnmarshalJSON umarshall json - template of ffjson
func (j *withdrawAPIRequest) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *withdrawAPIRequest) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtwithdrawAPIRequestbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtwithdrawAPIRequestnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeywithdrawAPIRequestAmount, kn) {
						currentKey = ffjtwithdrawAPIRequestAmount
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeywithdrawAPIRequestOutBizNo, kn) {
						currentKey = ffjtwithdrawAPIRequestOutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeywithdrawAPIRequestType, kn) {
						currentKey = ffjtwithdrawAPIRequestType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawAPIRequestAccount, kn) {
						currentKey = ffjtwithdrawAPIRequestAccount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawAPIRequestRealName, kn) {
						currentKey = ffjtwithdrawAPIRequestRealName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeywithdrawAPIRequestRemark, kn) {
						currentKey = ffjtwithdrawAPIRequestRemark
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIRequestRemark, kn) {
					currentKey = ffjtwithdrawAPIRequestRemark
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIRequestRealName, kn) {
					currentKey = ffjtwithdrawAPIRequestRealName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeywithdrawAPIRequestAmount, kn) {
					currentKey = ffjtwithdrawAPIRequestAmount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIRequestAccount, kn) {
					currentKey = ffjtwithdrawAPIRequestAccount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIRequestType, kn) {
					currentKey = ffjtwithdrawAPIRequestType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIRequestOutBizNo, kn) {
					currentKey = ffjtwithdrawAPIRequestOutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtwithdrawAPIRequestnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtwithdrawAPIRequestOutBizNo:
					goto handle_OutBizNo

				case ffjtwithdrawAPIRequestType:
					goto handle_Type

				case ffjtwithdrawAPIRequestAccount:
					goto handle_Account

				case ffjtwithdrawAPIRequestAmount:
					goto handle_Amount

				case ffjtwithdrawAPIRequestRealName:
					goto handle_RealName

				case ffjtwithdrawAPIRequestRemark:
					goto handle_Remark

				case ffjtwithdrawAPIRequestnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_OutBizNo:

	/* handler: j.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Account:

	/* handler: j.Account type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Account = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Amount:

	/* handler: j.Amount type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Amount = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RealName:

	/* handler: j.RealName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.RealName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Remark:

	/* handler: j.Remark type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Remark = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *withdrawAPIResp) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *withdrawAPIResp) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.Method != nil {
		buf.WriteString(`{"alipay_fund_trans_toaccount_transfer_response":`)

		{

			err = j.Method.MarshalJSONBuf(buf)
			if err != nil {
				return err
			}

		}
	} else {
		buf.WriteString(`{"alipay_fund_trans_toaccount_transfer_response":null`)
	}
	buf.WriteString(`,"sign":`)
	fflib.WriteJsonString(buf, string(j.Sign))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtwithdrawAPIRespbase = iota
	ffjtwithdrawAPIRespnosuchkey

	ffjtwithdrawAPIRespMethod

	ffjtwithdrawAPIRespSign
)

var ffjKeywithdrawAPIRespMethod = []byte("alipay_fund_trans_toaccount_transfer_response")

var ffjKeywithdrawAPIRespSign = []byte("sign")

// UnmarshalJSON umarshall json - template of ffjson
func (j *withdrawAPIResp) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *withdrawAPIResp) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtwithdrawAPIRespbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtwithdrawAPIRespnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeywithdrawAPIRespMethod, kn) {
						currentKey = ffjtwithdrawAPIRespMethod
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeywithdrawAPIRespSign, kn) {
						currentKey = ffjtwithdrawAPIRespSign
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIRespSign, kn) {
					currentKey = ffjtwithdrawAPIRespSign
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIRespMethod, kn) {
					currentKey = ffjtwithdrawAPIRespMethod
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtwithdrawAPIRespnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtwithdrawAPIRespMethod:
					goto handle_Method

				case ffjtwithdrawAPIRespSign:
					goto handle_Sign

				case ffjtwithdrawAPIRespnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Method:

	/* handler: j.Method type=alipay.withdrawAPIResponse kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Method = nil

		} else {

			if j.Method == nil {
				j.Method = new(withdrawAPIResponse)
			}

			err = j.Method.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sign:

	/* handler: j.Sign type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Sign = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *withdrawAPIResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *withdrawAPIResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"code":`)
	fflib.WriteJsonString(buf, string(j.Code))
	buf.WriteString(`,"msg":`)
	fflib.WriteJsonString(buf, string(j.Msg))
	buf.WriteString(`,"sub_code":`)
	fflib.WriteJsonString(buf, string(j.SubCode))
	buf.WriteString(`,"sub_msg":`)
	fflib.WriteJsonString(buf, string(j.SubMsg))
	buf.WriteString(`,"sign":`)
	fflib.WriteJsonString(buf, string(j.Sign))
	buf.WriteString(`,"out_biz_no":`)
	fflib.WriteJsonString(buf, string(j.OutBizNo))
	buf.WriteString(`,"order_id":`)
	fflib.WriteJsonString(buf, string(j.OrderID))
	buf.WriteString(`,"pay_date":`)
	fflib.WriteJsonString(buf, string(j.PayDate))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtwithdrawAPIResponsebase = iota
	ffjtwithdrawAPIResponsenosuchkey

	ffjtwithdrawAPIResponseCode

	ffjtwithdrawAPIResponseMsg

	ffjtwithdrawAPIResponseSubCode

	ffjtwithdrawAPIResponseSubMsg

	ffjtwithdrawAPIResponseSign

	ffjtwithdrawAPIResponseOutBizNo

	ffjtwithdrawAPIResponseOrderID

	ffjtwithdrawAPIResponsePayDate
)

var ffjKeywithdrawAPIResponseCode = []byte("code")

var ffjKeywithdrawAPIResponseMsg = []byte("msg")

var ffjKeywithdrawAPIResponseSubCode = []byte("sub_code")

var ffjKeywithdrawAPIResponseSubMsg = []byte("sub_msg")

var ffjKeywithdrawAPIResponseSign = []byte("sign")

var ffjKeywithdrawAPIResponseOutBizNo = []byte("out_biz_no")

var ffjKeywithdrawAPIResponseOrderID = []byte("order_id")

var ffjKeywithdrawAPIResponsePayDate = []byte("pay_date")

// UnmarshalJSON umarshall json - template of ffjson
func (j *withdrawAPIResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *withdrawAPIResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtwithdrawAPIResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtwithdrawAPIResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeywithdrawAPIResponseCode, kn) {
						currentKey = ffjtwithdrawAPIResponseCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeywithdrawAPIResponseMsg, kn) {
						currentKey = ffjtwithdrawAPIResponseMsg
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeywithdrawAPIResponseOutBizNo, kn) {
						currentKey = ffjtwithdrawAPIResponseOutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawAPIResponseOrderID, kn) {
						currentKey = ffjtwithdrawAPIResponseOrderID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeywithdrawAPIResponsePayDate, kn) {
						currentKey = ffjtwithdrawAPIResponsePayDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeywithdrawAPIResponseSubCode, kn) {
						currentKey = ffjtwithdrawAPIResponseSubCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawAPIResponseSubMsg, kn) {
						currentKey = ffjtwithdrawAPIResponseSubMsg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawAPIResponseSign, kn) {
						currentKey = ffjtwithdrawAPIResponseSign
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIResponsePayDate, kn) {
					currentKey = ffjtwithdrawAPIResponsePayDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIResponseOrderID, kn) {
					currentKey = ffjtwithdrawAPIResponseOrderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawAPIResponseOutBizNo, kn) {
					currentKey = ffjtwithdrawAPIResponseOutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIResponseSign, kn) {
					currentKey = ffjtwithdrawAPIResponseSign
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIResponseSubMsg, kn) {
					currentKey = ffjtwithdrawAPIResponseSubMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIResponseSubCode, kn) {
					currentKey = ffjtwithdrawAPIResponseSubCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawAPIResponseMsg, kn) {
					currentKey = ffjtwithdrawAPIResponseMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeywithdrawAPIResponseCode, kn) {
					currentKey = ffjtwithdrawAPIResponseCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtwithdrawAPIResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtwithdrawAPIResponseCode:
					goto handle_Code

				case ffjtwithdrawAPIResponseMsg:
					goto handle_Msg

				case ffjtwithdrawAPIResponseSubCode:
					goto handle_SubCode

				case ffjtwithdrawAPIResponseSubMsg:
					goto handle_SubMsg

				case ffjtwithdrawAPIResponseSign:
					goto handle_Sign

				case ffjtwithdrawAPIResponseOutBizNo:
					goto handle_OutBizNo

				case ffjtwithdrawAPIResponseOrderID:
					goto handle_OrderID

				case ffjtwithdrawAPIResponsePayDate:
					goto handle_PayDate

				case ffjtwithdrawAPIResponsenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Code:

	/* handler: j.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Msg:

	/* handler: j.Msg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Msg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubCode:

	/* handler: j.SubCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SubCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubMsg:

	/* handler: j.SubMsg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SubMsg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sign:

	/* handler: j.Sign type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Sign = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OutBizNo:

	/* handler: j.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderID:

	/* handler: j.OrderID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OrderID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PayDate:

	/* handler: j.PayDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PayDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *withdrawQueryAPIResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *withdrawQueryAPIResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"code":`)
	fflib.WriteJsonString(buf, string(j.Code))
	buf.WriteString(`,"msg":`)
	fflib.WriteJsonString(buf, string(j.Msg))
	buf.WriteString(`,"sub_code":`)
	fflib.WriteJsonString(buf, string(j.SubCode))
	buf.WriteString(`,"sub_msg":`)
	fflib.WriteJsonString(buf, string(j.SubMsg))
	buf.WriteString(`,"sign":`)
	fflib.WriteJsonString(buf, string(j.Sign))
	buf.WriteString(`,"order_id":`)
	fflib.WriteJsonString(buf, string(j.OrderID))
	buf.WriteString(`,"pay_date":`)
	fflib.WriteJsonString(buf, string(j.PayDate))
	buf.WriteString(`,"status":`)
	fflib.WriteJsonString(buf, string(j.Status))
	buf.WriteString(`,"out_biz_no":`)
	fflib.WriteJsonString(buf, string(j.OutBizNo))
	buf.WriteString(`,"fail_reason":`)
	fflib.WriteJsonString(buf, string(j.FailReason))
	buf.WriteString(`,"error_code":`)
	fflib.WriteJsonString(buf, string(j.ErrorCode))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtwithdrawQueryAPIResponsebase = iota
	ffjtwithdrawQueryAPIResponsenosuchkey

	ffjtwithdrawQueryAPIResponseCode

	ffjtwithdrawQueryAPIResponseMsg

	ffjtwithdrawQueryAPIResponseSubCode

	ffjtwithdrawQueryAPIResponseSubMsg

	ffjtwithdrawQueryAPIResponseSign

	ffjtwithdrawQueryAPIResponseOrderID

	ffjtwithdrawQueryAPIResponsePayDate

	ffjtwithdrawQueryAPIResponseStatus

	ffjtwithdrawQueryAPIResponseOutBizNo

	ffjtwithdrawQueryAPIResponseFailReason

	ffjtwithdrawQueryAPIResponseErrorCode
)

var ffjKeywithdrawQueryAPIResponseCode = []byte("code")

var ffjKeywithdrawQueryAPIResponseMsg = []byte("msg")

var ffjKeywithdrawQueryAPIResponseSubCode = []byte("sub_code")

var ffjKeywithdrawQueryAPIResponseSubMsg = []byte("sub_msg")

var ffjKeywithdrawQueryAPIResponseSign = []byte("sign")

var ffjKeywithdrawQueryAPIResponseOrderID = []byte("order_id")

var ffjKeywithdrawQueryAPIResponsePayDate = []byte("pay_date")

var ffjKeywithdrawQueryAPIResponseStatus = []byte("status")

var ffjKeywithdrawQueryAPIResponseOutBizNo = []byte("out_biz_no")

var ffjKeywithdrawQueryAPIResponseFailReason = []byte("fail_reason")

var ffjKeywithdrawQueryAPIResponseErrorCode = []byte("error_code")

// UnmarshalJSON umarshall json - template of ffjson
func (j *withdrawQueryAPIResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *withdrawQueryAPIResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtwithdrawQueryAPIResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtwithdrawQueryAPIResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseCode, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseErrorCode, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseErrorCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseFailReason, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseFailReason
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseMsg, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseMsg
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseOrderID, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseOrderID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawQueryAPIResponseOutBizNo, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseOutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponsePayDate, kn) {
						currentKey = ffjtwithdrawQueryAPIResponsePayDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeywithdrawQueryAPIResponseSubCode, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseSubCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawQueryAPIResponseSubMsg, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseSubMsg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawQueryAPIResponseSign, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseSign
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeywithdrawQueryAPIResponseStatus, kn) {
						currentKey = ffjtwithdrawQueryAPIResponseStatus
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeywithdrawQueryAPIResponseErrorCode, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseErrorCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseFailReason, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseFailReason
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawQueryAPIResponseOutBizNo, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseOutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseStatus, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseStatus
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawQueryAPIResponsePayDate, kn) {
					currentKey = ffjtwithdrawQueryAPIResponsePayDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeywithdrawQueryAPIResponseOrderID, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseOrderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseSign, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseSign
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseSubMsg, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseSubMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseSubCode, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseSubCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeywithdrawQueryAPIResponseMsg, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeywithdrawQueryAPIResponseCode, kn) {
					currentKey = ffjtwithdrawQueryAPIResponseCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtwithdrawQueryAPIResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtwithdrawQueryAPIResponseCode:
					goto handle_Code

				case ffjtwithdrawQueryAPIResponseMsg:
					goto handle_Msg

				case ffjtwithdrawQueryAPIResponseSubCode:
					goto handle_SubCode

				case ffjtwithdrawQueryAPIResponseSubMsg:
					goto handle_SubMsg

				case ffjtwithdrawQueryAPIResponseSign:
					goto handle_Sign

				case ffjtwithdrawQueryAPIResponseOrderID:
					goto handle_OrderID

				case ffjtwithdrawQueryAPIResponsePayDate:
					goto handle_PayDate

				case ffjtwithdrawQueryAPIResponseStatus:
					goto handle_Status

				case ffjtwithdrawQueryAPIResponseOutBizNo:
					goto handle_OutBizNo

				case ffjtwithdrawQueryAPIResponseFailReason:
					goto handle_FailReason

				case ffjtwithdrawQueryAPIResponseErrorCode:
					goto handle_ErrorCode

				case ffjtwithdrawQueryAPIResponsenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Code:

	/* handler: j.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Msg:

	/* handler: j.Msg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Msg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubCode:

	/* handler: j.SubCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SubCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubMsg:

	/* handler: j.SubMsg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SubMsg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sign:

	/* handler: j.Sign type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Sign = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderID:

	/* handler: j.OrderID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OrderID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PayDate:

	/* handler: j.PayDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PayDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Status:

	/* handler: j.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Status = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OutBizNo:

	/* handler: j.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FailReason:

	/* handler: j.FailReason type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FailReason = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ErrorCode:

	/* handler: j.ErrorCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ErrorCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
