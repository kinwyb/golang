// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: config.go
// DO NOT EDIT!

package alipay

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *PayConfig) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PayConfig) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Partner":`)
	fflib.WriteJsonString(buf, string(mj.Partner))
	buf.WriteString(`,"PrivateKey":`)
	fflib.WriteJsonString(buf, string(mj.PrivateKey))
	buf.WriteString(`,"PublicKey":`)
	fflib.WriteJsonString(buf, string(mj.PublicKey))
	buf.WriteString(`,"ReturnURL":`)
	fflib.WriteJsonString(buf, string(mj.ReturnURL))
	buf.WriteString(`,"NotifyURL":`)
	fflib.WriteJsonString(buf, string(mj.NotifyURL))
	buf.WriteString(`,"Code":`)
	fflib.WriteJsonString(buf, string(mj.Code))
	buf.WriteString(`,"Name":`)
	fflib.WriteJsonString(buf, string(mj.Name))
	if mj.State {
		buf.WriteString(`,"State":true`)
	} else {
		buf.WriteString(`,"State":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PayConfigbase = iota
	ffj_t_PayConfigno_such_key

	ffj_t_PayConfig_Partner

	ffj_t_PayConfig_PrivateKey

	ffj_t_PayConfig_PublicKey

	ffj_t_PayConfig_ReturnURL

	ffj_t_PayConfig_NotifyURL

	ffj_t_PayConfig_Code

	ffj_t_PayConfig_Name

	ffj_t_PayConfig_State
)

var ffj_key_PayConfig_Partner = []byte("Partner")

var ffj_key_PayConfig_PrivateKey = []byte("PrivateKey")

var ffj_key_PayConfig_PublicKey = []byte("PublicKey")

var ffj_key_PayConfig_ReturnURL = []byte("ReturnURL")

var ffj_key_PayConfig_NotifyURL = []byte("NotifyURL")

var ffj_key_PayConfig_Code = []byte("Code")

var ffj_key_PayConfig_Name = []byte("Name")

var ffj_key_PayConfig_State = []byte("State")

func (uj *PayConfig) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PayConfig) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PayConfigbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PayConfigno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_key_PayConfig_Code, kn) {
						currentKey = ffj_t_PayConfig_Code
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'N':

					if bytes.Equal(ffj_key_PayConfig_NotifyURL, kn) {
						currentKey = ffj_t_PayConfig_NotifyURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PayConfig_Name, kn) {
						currentKey = ffj_t_PayConfig_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_PayConfig_Partner, kn) {
						currentKey = ffj_t_PayConfig_Partner
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PayConfig_PrivateKey, kn) {
						currentKey = ffj_t_PayConfig_PrivateKey
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PayConfig_PublicKey, kn) {
						currentKey = ffj_t_PayConfig_PublicKey
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffj_key_PayConfig_ReturnURL, kn) {
						currentKey = ffj_t_PayConfig_ReturnURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffj_key_PayConfig_State, kn) {
						currentKey = ffj_t_PayConfig_State
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_PayConfig_State, kn) {
					currentKey = ffj_t_PayConfig_State
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PayConfig_Name, kn) {
					currentKey = ffj_t_PayConfig_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PayConfig_Code, kn) {
					currentKey = ffj_t_PayConfig_Code
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PayConfig_NotifyURL, kn) {
					currentKey = ffj_t_PayConfig_NotifyURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PayConfig_ReturnURL, kn) {
					currentKey = ffj_t_PayConfig_ReturnURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PayConfig_PublicKey, kn) {
					currentKey = ffj_t_PayConfig_PublicKey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PayConfig_PrivateKey, kn) {
					currentKey = ffj_t_PayConfig_PrivateKey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PayConfig_Partner, kn) {
					currentKey = ffj_t_PayConfig_Partner
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PayConfigno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PayConfig_Partner:
					goto handle_Partner

				case ffj_t_PayConfig_PrivateKey:
					goto handle_PrivateKey

				case ffj_t_PayConfig_PublicKey:
					goto handle_PublicKey

				case ffj_t_PayConfig_ReturnURL:
					goto handle_ReturnURL

				case ffj_t_PayConfig_NotifyURL:
					goto handle_NotifyURL

				case ffj_t_PayConfig_Code:
					goto handle_Code

				case ffj_t_PayConfig_Name:
					goto handle_Name

				case ffj_t_PayConfig_State:
					goto handle_State

				case ffj_t_PayConfigno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Partner:

	/* handler: uj.Partner type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Partner = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PrivateKey:

	/* handler: uj.PrivateKey type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PrivateKey = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PublicKey:

	/* handler: uj.PublicKey type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PublicKey = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReturnURL:

	/* handler: uj.ReturnURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ReturnURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NotifyURL:

	/* handler: uj.NotifyURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.NotifyURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Code:

	/* handler: uj.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_State:

	/* handler: uj.State type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.State = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.State = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

func (mj *withdrawAPIRequest) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *withdrawAPIRequest) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"out_biz_no":`)
	fflib.WriteJsonString(buf, string(mj.OutBizNo))
	buf.WriteString(`,"payee_type":`)
	fflib.WriteJsonString(buf, string(mj.Type))
	buf.WriteString(`,"payee_account":`)
	fflib.WriteJsonString(buf, string(mj.Account))
	buf.WriteString(`,"payee_real_name":`)
	fflib.WriteJsonString(buf, string(mj.RealName))
	buf.WriteString(`,"amount":`)
	fflib.WriteJsonString(buf, string(mj.Amount))
	buf.WriteString(`,"remark":`)
	fflib.WriteJsonString(buf, string(mj.Remark))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_withdrawAPIRequestbase = iota
	ffj_t_withdrawAPIRequestno_such_key

	ffj_t_withdrawAPIRequest_OutBizNo

	ffj_t_withdrawAPIRequest_Type

	ffj_t_withdrawAPIRequest_Account

	ffj_t_withdrawAPIRequest_RealName

	ffj_t_withdrawAPIRequest_Amount

	ffj_t_withdrawAPIRequest_Remark
)

var ffj_key_withdrawAPIRequest_OutBizNo = []byte("out_biz_no")

var ffj_key_withdrawAPIRequest_Type = []byte("payee_type")

var ffj_key_withdrawAPIRequest_Account = []byte("payee_account")

var ffj_key_withdrawAPIRequest_RealName = []byte("payee_real_name")

var ffj_key_withdrawAPIRequest_Amount = []byte("amount")

var ffj_key_withdrawAPIRequest_Remark = []byte("remark")

func (uj *withdrawAPIRequest) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *withdrawAPIRequest) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_withdrawAPIRequestbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_withdrawAPIRequestno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_withdrawAPIRequest_Amount, kn) {
						currentKey = ffj_t_withdrawAPIRequest_Amount
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffj_key_withdrawAPIRequest_OutBizNo, kn) {
						currentKey = ffj_t_withdrawAPIRequest_OutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_withdrawAPIRequest_Type, kn) {
						currentKey = ffj_t_withdrawAPIRequest_Type
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawAPIRequest_Account, kn) {
						currentKey = ffj_t_withdrawAPIRequest_Account
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawAPIRequest_RealName, kn) {
						currentKey = ffj_t_withdrawAPIRequest_RealName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_withdrawAPIRequest_Remark, kn) {
						currentKey = ffj_t_withdrawAPIRequest_Remark
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_withdrawAPIRequest_Remark, kn) {
					currentKey = ffj_t_withdrawAPIRequest_Remark
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_withdrawAPIRequest_Amount, kn) {
					currentKey = ffj_t_withdrawAPIRequest_Amount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIRequest_RealName, kn) {
					currentKey = ffj_t_withdrawAPIRequest_RealName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIRequest_Account, kn) {
					currentKey = ffj_t_withdrawAPIRequest_Account
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIRequest_Type, kn) {
					currentKey = ffj_t_withdrawAPIRequest_Type
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIRequest_OutBizNo, kn) {
					currentKey = ffj_t_withdrawAPIRequest_OutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_withdrawAPIRequestno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_withdrawAPIRequest_OutBizNo:
					goto handle_OutBizNo

				case ffj_t_withdrawAPIRequest_Type:
					goto handle_Type

				case ffj_t_withdrawAPIRequest_Account:
					goto handle_Account

				case ffj_t_withdrawAPIRequest_RealName:
					goto handle_RealName

				case ffj_t_withdrawAPIRequest_Amount:
					goto handle_Amount

				case ffj_t_withdrawAPIRequest_Remark:
					goto handle_Remark

				case ffj_t_withdrawAPIRequestno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_OutBizNo:

	/* handler: uj.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: uj.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Account:

	/* handler: uj.Account type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Account = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RealName:

	/* handler: uj.RealName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.RealName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Amount:

	/* handler: uj.Amount type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Amount = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Remark:

	/* handler: uj.Remark type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Remark = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

func (mj *withdrawAPIResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *withdrawAPIResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"code":`)
	fflib.WriteJsonString(buf, string(mj.Code))
	buf.WriteString(`,"msg":`)
	fflib.WriteJsonString(buf, string(mj.Msg))
	buf.WriteString(`,"sub_code":`)
	fflib.WriteJsonString(buf, string(mj.SubCode))
	buf.WriteString(`,"sub_msg":`)
	fflib.WriteJsonString(buf, string(mj.SubMsg))
	buf.WriteString(`,"sign":`)
	fflib.WriteJsonString(buf, string(mj.Sign))
	buf.WriteString(`,"out_biz_no":`)
	fflib.WriteJsonString(buf, string(mj.OutBizNo))
	buf.WriteString(`,"order_id":`)
	fflib.WriteJsonString(buf, string(mj.OrderID))
	buf.WriteString(`,"pay_date":`)
	fflib.WriteJsonString(buf, string(mj.PayDate))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_withdrawAPIResponsebase = iota
	ffj_t_withdrawAPIResponseno_such_key

	ffj_t_withdrawAPIResponse_Code

	ffj_t_withdrawAPIResponse_Msg

	ffj_t_withdrawAPIResponse_SubCode

	ffj_t_withdrawAPIResponse_SubMsg

	ffj_t_withdrawAPIResponse_Sign

	ffj_t_withdrawAPIResponse_OutBizNo

	ffj_t_withdrawAPIResponse_OrderID

	ffj_t_withdrawAPIResponse_PayDate
)

var ffj_key_withdrawAPIResponse_Code = []byte("code")

var ffj_key_withdrawAPIResponse_Msg = []byte("msg")

var ffj_key_withdrawAPIResponse_SubCode = []byte("sub_code")

var ffj_key_withdrawAPIResponse_SubMsg = []byte("sub_msg")

var ffj_key_withdrawAPIResponse_Sign = []byte("sign")

var ffj_key_withdrawAPIResponse_OutBizNo = []byte("out_biz_no")

var ffj_key_withdrawAPIResponse_OrderID = []byte("order_id")

var ffj_key_withdrawAPIResponse_PayDate = []byte("pay_date")

func (uj *withdrawAPIResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *withdrawAPIResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_withdrawAPIResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_withdrawAPIResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_withdrawAPIResponse_Code, kn) {
						currentKey = ffj_t_withdrawAPIResponse_Code
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_withdrawAPIResponse_Msg, kn) {
						currentKey = ffj_t_withdrawAPIResponse_Msg
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffj_key_withdrawAPIResponse_OutBizNo, kn) {
						currentKey = ffj_t_withdrawAPIResponse_OutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawAPIResponse_OrderID, kn) {
						currentKey = ffj_t_withdrawAPIResponse_OrderID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_withdrawAPIResponse_PayDate, kn) {
						currentKey = ffj_t_withdrawAPIResponse_PayDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_withdrawAPIResponse_SubCode, kn) {
						currentKey = ffj_t_withdrawAPIResponse_SubCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawAPIResponse_SubMsg, kn) {
						currentKey = ffj_t_withdrawAPIResponse_SubMsg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawAPIResponse_Sign, kn) {
						currentKey = ffj_t_withdrawAPIResponse_Sign
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIResponse_PayDate, kn) {
					currentKey = ffj_t_withdrawAPIResponse_PayDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIResponse_OrderID, kn) {
					currentKey = ffj_t_withdrawAPIResponse_OrderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawAPIResponse_OutBizNo, kn) {
					currentKey = ffj_t_withdrawAPIResponse_OutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawAPIResponse_Sign, kn) {
					currentKey = ffj_t_withdrawAPIResponse_Sign
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawAPIResponse_SubMsg, kn) {
					currentKey = ffj_t_withdrawAPIResponse_SubMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawAPIResponse_SubCode, kn) {
					currentKey = ffj_t_withdrawAPIResponse_SubCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawAPIResponse_Msg, kn) {
					currentKey = ffj_t_withdrawAPIResponse_Msg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_withdrawAPIResponse_Code, kn) {
					currentKey = ffj_t_withdrawAPIResponse_Code
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_withdrawAPIResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_withdrawAPIResponse_Code:
					goto handle_Code

				case ffj_t_withdrawAPIResponse_Msg:
					goto handle_Msg

				case ffj_t_withdrawAPIResponse_SubCode:
					goto handle_SubCode

				case ffj_t_withdrawAPIResponse_SubMsg:
					goto handle_SubMsg

				case ffj_t_withdrawAPIResponse_Sign:
					goto handle_Sign

				case ffj_t_withdrawAPIResponse_OutBizNo:
					goto handle_OutBizNo

				case ffj_t_withdrawAPIResponse_OrderID:
					goto handle_OrderID

				case ffj_t_withdrawAPIResponse_PayDate:
					goto handle_PayDate

				case ffj_t_withdrawAPIResponseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Code:

	/* handler: uj.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Msg:

	/* handler: uj.Msg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Msg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubCode:

	/* handler: uj.SubCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SubCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubMsg:

	/* handler: uj.SubMsg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SubMsg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sign:

	/* handler: uj.Sign type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Sign = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OutBizNo:

	/* handler: uj.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderID:

	/* handler: uj.OrderID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OrderID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PayDate:

	/* handler: uj.PayDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PayDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

func (mj *withdrawQueryAPIResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *withdrawQueryAPIResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"code":`)
	fflib.WriteJsonString(buf, string(mj.Code))
	buf.WriteString(`,"msg":`)
	fflib.WriteJsonString(buf, string(mj.Msg))
	buf.WriteString(`,"sub_code":`)
	fflib.WriteJsonString(buf, string(mj.SubCode))
	buf.WriteString(`,"sub_msg":`)
	fflib.WriteJsonString(buf, string(mj.SubMsg))
	buf.WriteString(`,"sign":`)
	fflib.WriteJsonString(buf, string(mj.Sign))
	buf.WriteString(`,"order_id":`)
	fflib.WriteJsonString(buf, string(mj.OrderID))
	buf.WriteString(`,"pay_date":`)
	fflib.WriteJsonString(buf, string(mj.PayDate))
	buf.WriteString(`,"status":`)
	fflib.WriteJsonString(buf, string(mj.Status))
	buf.WriteString(`,"out_biz_no":`)
	fflib.WriteJsonString(buf, string(mj.OutBizNo))
	buf.WriteString(`,"fail_reason":`)
	fflib.WriteJsonString(buf, string(mj.FailReason))
	buf.WriteString(`,"error_code":`)
	fflib.WriteJsonString(buf, string(mj.ErrorCode))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_withdrawQueryAPIResponsebase = iota
	ffj_t_withdrawQueryAPIResponseno_such_key

	ffj_t_withdrawQueryAPIResponse_Code

	ffj_t_withdrawQueryAPIResponse_Msg

	ffj_t_withdrawQueryAPIResponse_SubCode

	ffj_t_withdrawQueryAPIResponse_SubMsg

	ffj_t_withdrawQueryAPIResponse_Sign

	ffj_t_withdrawQueryAPIResponse_OrderID

	ffj_t_withdrawQueryAPIResponse_PayDate

	ffj_t_withdrawQueryAPIResponse_Status

	ffj_t_withdrawQueryAPIResponse_OutBizNo

	ffj_t_withdrawQueryAPIResponse_FailReason

	ffj_t_withdrawQueryAPIResponse_ErrorCode
)

var ffj_key_withdrawQueryAPIResponse_Code = []byte("code")

var ffj_key_withdrawQueryAPIResponse_Msg = []byte("msg")

var ffj_key_withdrawQueryAPIResponse_SubCode = []byte("sub_code")

var ffj_key_withdrawQueryAPIResponse_SubMsg = []byte("sub_msg")

var ffj_key_withdrawQueryAPIResponse_Sign = []byte("sign")

var ffj_key_withdrawQueryAPIResponse_OrderID = []byte("order_id")

var ffj_key_withdrawQueryAPIResponse_PayDate = []byte("pay_date")

var ffj_key_withdrawQueryAPIResponse_Status = []byte("status")

var ffj_key_withdrawQueryAPIResponse_OutBizNo = []byte("out_biz_no")

var ffj_key_withdrawQueryAPIResponse_FailReason = []byte("fail_reason")

var ffj_key_withdrawQueryAPIResponse_ErrorCode = []byte("error_code")

func (uj *withdrawQueryAPIResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *withdrawQueryAPIResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_withdrawQueryAPIResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_withdrawQueryAPIResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_Code, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_Code
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_ErrorCode, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_ErrorCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_FailReason, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_FailReason
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_Msg, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_Msg
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_OrderID, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_OrderID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawQueryAPIResponse_OutBizNo, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_OutBizNo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_PayDate, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_PayDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_withdrawQueryAPIResponse_SubCode, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_SubCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawQueryAPIResponse_SubMsg, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_SubMsg
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawQueryAPIResponse_Sign, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_Sign
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_withdrawQueryAPIResponse_Status, kn) {
						currentKey = ffj_t_withdrawQueryAPIResponse_Status
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_withdrawQueryAPIResponse_ErrorCode, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_ErrorCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_FailReason, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_FailReason
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawQueryAPIResponse_OutBizNo, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_OutBizNo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_Status, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_Status
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawQueryAPIResponse_PayDate, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_PayDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_withdrawQueryAPIResponse_OrderID, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_OrderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_Sign, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_Sign
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_SubMsg, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_SubMsg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_SubCode, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_SubCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_withdrawQueryAPIResponse_Msg, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_Msg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_withdrawQueryAPIResponse_Code, kn) {
					currentKey = ffj_t_withdrawQueryAPIResponse_Code
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_withdrawQueryAPIResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_withdrawQueryAPIResponse_Code:
					goto handle_Code

				case ffj_t_withdrawQueryAPIResponse_Msg:
					goto handle_Msg

				case ffj_t_withdrawQueryAPIResponse_SubCode:
					goto handle_SubCode

				case ffj_t_withdrawQueryAPIResponse_SubMsg:
					goto handle_SubMsg

				case ffj_t_withdrawQueryAPIResponse_Sign:
					goto handle_Sign

				case ffj_t_withdrawQueryAPIResponse_OrderID:
					goto handle_OrderID

				case ffj_t_withdrawQueryAPIResponse_PayDate:
					goto handle_PayDate

				case ffj_t_withdrawQueryAPIResponse_Status:
					goto handle_Status

				case ffj_t_withdrawQueryAPIResponse_OutBizNo:
					goto handle_OutBizNo

				case ffj_t_withdrawQueryAPIResponse_FailReason:
					goto handle_FailReason

				case ffj_t_withdrawQueryAPIResponse_ErrorCode:
					goto handle_ErrorCode

				case ffj_t_withdrawQueryAPIResponseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Code:

	/* handler: uj.Code type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Code = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Msg:

	/* handler: uj.Msg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Msg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubCode:

	/* handler: uj.SubCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SubCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SubMsg:

	/* handler: uj.SubMsg type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SubMsg = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sign:

	/* handler: uj.Sign type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Sign = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderID:

	/* handler: uj.OrderID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OrderID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PayDate:

	/* handler: uj.PayDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PayDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Status:

	/* handler: uj.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Status = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OutBizNo:

	/* handler: uj.OutBizNo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OutBizNo = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FailReason:

	/* handler: uj.FailReason type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FailReason = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ErrorCode:

	/* handler: uj.ErrorCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ErrorCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
