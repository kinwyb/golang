// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: psutil.go
// DO NOT EDIT!

package utils

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *EtcdPsInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *EtcdPsInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Name":`)
	fflib.WriteJsonString(buf, string(mj.Name))
	buf.WriteString(`,"ExternalIP":`)
	fflib.WriteJsonString(buf, string(mj.ExternalIP))
	buf.WriteString(`,"InternalIP":`)
	fflib.WriteJsonString(buf, string(mj.InternalIP))
	buf.WriteString(`,"CPUPercent":`)
	fflib.AppendFloat(buf, float64(mj.CPUPercent), 'g', -1, 64)
	buf.WriteString(`,"MemoryPercent":`)
	fflib.AppendFloat(buf, float64(mj.MemoryPercent), 'g', -1, 32)
	buf.WriteString(`,"Memory":`)
	fflib.FormatBits2(buf, uint64(mj.Memory), 10, false)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_EtcdPsInfobase = iota
	ffj_t_EtcdPsInfono_such_key

	ffj_t_EtcdPsInfo_Name

	ffj_t_EtcdPsInfo_ExternalIP

	ffj_t_EtcdPsInfo_InternalIP

	ffj_t_EtcdPsInfo_CPUPercent

	ffj_t_EtcdPsInfo_MemoryPercent

	ffj_t_EtcdPsInfo_Memory
)

var ffj_key_EtcdPsInfo_Name = []byte("Name")

var ffj_key_EtcdPsInfo_ExternalIP = []byte("ExternalIP")

var ffj_key_EtcdPsInfo_InternalIP = []byte("InternalIP")

var ffj_key_EtcdPsInfo_CPUPercent = []byte("CPUPercent")

var ffj_key_EtcdPsInfo_MemoryPercent = []byte("MemoryPercent")

var ffj_key_EtcdPsInfo_Memory = []byte("Memory")

func (uj *EtcdPsInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *EtcdPsInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_EtcdPsInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_EtcdPsInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_key_EtcdPsInfo_CPUPercent, kn) {
						currentKey = ffj_t_EtcdPsInfo_CPUPercent
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffj_key_EtcdPsInfo_ExternalIP, kn) {
						currentKey = ffj_t_EtcdPsInfo_ExternalIP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffj_key_EtcdPsInfo_InternalIP, kn) {
						currentKey = ffj_t_EtcdPsInfo_InternalIP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'M':

					if bytes.Equal(ffj_key_EtcdPsInfo_MemoryPercent, kn) {
						currentKey = ffj_t_EtcdPsInfo_MemoryPercent
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_EtcdPsInfo_Memory, kn) {
						currentKey = ffj_t_EtcdPsInfo_Memory
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'N':

					if bytes.Equal(ffj_key_EtcdPsInfo_Name, kn) {
						currentKey = ffj_t_EtcdPsInfo_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_Memory, kn) {
					currentKey = ffj_t_EtcdPsInfo_Memory
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_MemoryPercent, kn) {
					currentKey = ffj_t_EtcdPsInfo_MemoryPercent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_CPUPercent, kn) {
					currentKey = ffj_t_EtcdPsInfo_CPUPercent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_InternalIP, kn) {
					currentKey = ffj_t_EtcdPsInfo_InternalIP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_ExternalIP, kn) {
					currentKey = ffj_t_EtcdPsInfo_ExternalIP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_EtcdPsInfo_Name, kn) {
					currentKey = ffj_t_EtcdPsInfo_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_EtcdPsInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_EtcdPsInfo_Name:
					goto handle_Name

				case ffj_t_EtcdPsInfo_ExternalIP:
					goto handle_ExternalIP

				case ffj_t_EtcdPsInfo_InternalIP:
					goto handle_InternalIP

				case ffj_t_EtcdPsInfo_CPUPercent:
					goto handle_CPUPercent

				case ffj_t_EtcdPsInfo_MemoryPercent:
					goto handle_MemoryPercent

				case ffj_t_EtcdPsInfo_Memory:
					goto handle_Memory

				case ffj_t_EtcdPsInfono_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ExternalIP:

	/* handler: uj.ExternalIP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ExternalIP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InternalIP:

	/* handler: uj.InternalIP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.InternalIP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CPUPercent:

	/* handler: uj.CPUPercent type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CPUPercent = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MemoryPercent:

	/* handler: uj.MemoryPercent type=float32 kind=float32 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MemoryPercent = float32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Memory:

	/* handler: uj.Memory type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Memory = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

func (mj *PsInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PsInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"CPUPercent":`)
	fflib.AppendFloat(buf, float64(mj.CPUPercent), 'g', -1, 64)
	buf.WriteString(`,"MemoryPercent":`)
	fflib.AppendFloat(buf, float64(mj.MemoryPercent), 'g', -1, 32)
	buf.WriteString(`,"Memory":`)
	fflib.FormatBits2(buf, uint64(mj.Memory), 10, false)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PsInfobase = iota
	ffj_t_PsInfono_such_key

	ffj_t_PsInfo_CPUPercent

	ffj_t_PsInfo_MemoryPercent

	ffj_t_PsInfo_Memory
)

var ffj_key_PsInfo_CPUPercent = []byte("CPUPercent")

var ffj_key_PsInfo_MemoryPercent = []byte("MemoryPercent")

var ffj_key_PsInfo_Memory = []byte("Memory")

func (uj *PsInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PsInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PsInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PsInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_key_PsInfo_CPUPercent, kn) {
						currentKey = ffj_t_PsInfo_CPUPercent
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'M':

					if bytes.Equal(ffj_key_PsInfo_MemoryPercent, kn) {
						currentKey = ffj_t_PsInfo_MemoryPercent
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PsInfo_Memory, kn) {
						currentKey = ffj_t_PsInfo_Memory
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_PsInfo_Memory, kn) {
					currentKey = ffj_t_PsInfo_Memory
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PsInfo_MemoryPercent, kn) {
					currentKey = ffj_t_PsInfo_MemoryPercent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PsInfo_CPUPercent, kn) {
					currentKey = ffj_t_PsInfo_CPUPercent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PsInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PsInfo_CPUPercent:
					goto handle_CPUPercent

				case ffj_t_PsInfo_MemoryPercent:
					goto handle_MemoryPercent

				case ffj_t_PsInfo_Memory:
					goto handle_Memory

				case ffj_t_PsInfono_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CPUPercent:

	/* handler: uj.CPUPercent type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CPUPercent = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MemoryPercent:

	/* handler: uj.MemoryPercent type=float32 kind=float32 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MemoryPercent = float32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Memory:

	/* handler: uj.Memory type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Memory = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
